{"version":3,"file":"review-service.js","sources":["inputJS/Config/configVar.js","inputJS/Config/config.js","inputJS/review-service.js"],"sourcesContent":["export const configVar = {\r\n  development: {\r\n    REVIEW_END_POINT: 'https://data-intel-document-service.herokuapp.com/v1',\r\n  },\r\n};\r\n","import { configVar } from './configVar';\r\nconst env = process.env.NODE_ENV || 'development';\r\n\r\nconst envConfig = () => {\r\n  if (env === 'development') {\r\n    const envConfig = configVar[env];\r\n\r\n    Object.keys(envConfig).forEach(key => {\r\n      process.env[key] = envConfig[key];\r\n    });\r\n  }\r\n};\r\n\r\nexport default envConfig;\r\n","import envConfiguration from './Config/config';\nenvConfiguration();\n\n/**\n *Function to normalize the payload receive in the review request call and the creation of the analyze text.\n *\n * @param {*} reviewResult\n */\nfunction renderAnalyzeReview(reviewResult) {\n  const divUpperFeedback = document.getElementById('upper-part-feedback');\n  let aspectSerializer = [];\n\n  reviewResult.sentiment_analysis.sentence_list.forEach(sentence_list => {\n    sentence_list.segment_list.forEach(segment_list => {\n      segment_list.polarity_term_list.forEach(polarity_term_list => {\n        let typeOfAspect = 'NEU';\n\n        if (\n          polarity_term_list.score_tag === 'P' ||\n          polarity_term_list.score_tag === 'P+'\n        ) {\n          typeOfAspect = 'positive';\n        } else if (\n          polarity_term_list.score_tag === 'N' ||\n          polarity_term_list.score_tag === 'N+'\n        ) {\n          typeOfAspect = 'negative';\n        }\n\n        aspectSerializer.push({\n          term: polarity_term_list.text,\n          typeOfAspect,\n        });\n\n        polarity_term_list.sentimented_concept_list.forEach(\n          sentimented_concept_list => {\n            aspectSerializer.push({\n              term: sentimented_concept_list.form,\n              typeOfAspect: 'aspect',\n            });\n          },\n        );\n      });\n    });\n  });\n\n  reviewResult.text.split(' ').forEach(element => {\n    const newP = document.createElement('p');\n    const text = document.createTextNode(element);\n    newP.appendChild(text);\n\n    aspectSerializer.forEach(serializeAspect => {\n      if (serializeAspect.term === element && serializeAspect.term !== 'NEU') {\n        newP.classList.add(serializeAspect.typeOfAspect);\n      }\n    });\n\n    divUpperFeedback.appendChild(newP);\n  });\n}\n\n/**\n * Function to listen to submissions of example reviews\n */\nfunction analyzeDataSubmitListener() {\n  document\n    .getElementById('analyze-form')\n    .addEventListener('submit', function(event) {\n      event.preventDefault();\n      const textArea = event.target[0];\n\n      if (textArea.value === '') {\n        textArea.classList.add('animated', 'shake');\n        setTimeout(() => {\n          textArea.classList.remove('animated', 'shake');\n        }, 1000);\n        return;\n      }\n\n      const postParams = Object.assign(\n        {},\n        {\n          text: textArea.value,\n        },\n      );\n\n      const axiosConfig = {\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Access-Control-Allow-Origin': '*',\n        },\n      };\n\n      axios\n        .post(\n          `${process.env.REVIEW_END_POINT}/documents`,\n          postParams,\n          axiosConfig,\n        )\n        .then(function(response) {\n          renderAnalyzeReview(response.data);\n          document.getElementById('feedback-text').classList.remove('hidden');\n          document\n            .getElementById('feedback-text')\n            .classList.add('animated', 'fadeInUp');\n          textArea.value = '';\n        })\n        .catch(function(error) {\n          throw new Error(error);\n        });\n    });\n}\n\nanalyzeDataSubmitListener();\n"],"names":["configVar","development","REVIEW_END_POINT","env","process","NODE_ENV","envConfig","Object","keys","forEach","key","document","getElementById","addEventListener","event","preventDefault","textArea","target","value","classList","add","setTimeout","remove","postParams","assign","text","axios","post","headers","Content-Type","Access-Control-Allow-Origin","then","response","reviewResult","divUpperFeedback","aspectSerializer","sentiment_analysis","sentence_list","segment_list","polarity_term_list","typeOfAspect","score_tag","push","term","sentimented_concept_list","form","split","element","newP","createElement","createTextNode","appendChild","serializeAspect","renderAnalyzeReview","data","catch","error","Error"],"mappings":"yBAAO,MAAMA,EAAY,CACvBC,YAAa,CACXC,iBAAkB,yDCDhBC,EAAMC,QAAQD,IAAIE,UAAY,cAElB,MAChB,GAAY,gBAARF,EAAuB,CACzB,MAAMG,EAAYN,EAAUG,GAE5BI,OAAOC,KAAKF,GAAWG,QAAQC,IAC7BN,QAAQD,IAAIO,GAAOJ,EAAUI,UCyDjCC,SACGC,eAAe,gBACfC,iBAAiB,SAAU,SAASC,GACnCA,EAAMC,iBACN,MAAMC,EAAWF,EAAMG,OAAO,GAE9B,GAAuB,KAAnBD,EAASE,MAKX,OAJAF,EAASG,UAAUC,IAAI,WAAY,cACnCC,WAAW,KACTL,EAASG,UAAUG,OAAO,WAAY,UACrC,KAIL,MAAMC,EAAahB,OAAOiB,OACxB,GACA,CACEC,KAAMT,EAASE,QAWnBQ,MACGC,QACIvB,QAAQD,IAAID,6BACfqB,EAVgB,CAClBK,QAAS,CACPC,eAAgB,iCAChBC,8BAA+B,OAUhCC,KAAK,SAASC,IA3FvB,SAA6BC,GAC3B,MAAMC,EAAmBvB,SAASC,eAAe,uBACjD,IAAIuB,EAAmB,GAEvBF,EAAaG,mBAAmBC,cAAc5B,QAAQ4B,IACpDA,EAAcC,aAAa7B,QAAQ6B,IACjCA,EAAaC,mBAAmB9B,QAAQ8B,IACtC,IAAIC,EAAe,MAGgB,MAAjCD,EAAmBE,WACc,OAAjCF,EAAmBE,UAEnBD,EAAe,WAEkB,MAAjCD,EAAmBE,WACc,OAAjCF,EAAmBE,YAEnBD,EAAe,YAGjBL,EAAiBO,KAAK,CACpBC,KAAMJ,EAAmBd,KACzBe,aAAAA,IAGFD,EAAmBK,yBAAyBnC,QAC1CmC,IACET,EAAiBO,KAAK,CACpBC,KAAMC,EAAyBC,KAC/BL,aAAc,mBAQ1BP,EAAaR,KAAKqB,MAAM,KAAKrC,QAAQsC,IACnC,MAAMC,EAAOrC,SAASsC,cAAc,KAC9BxB,EAAOd,SAASuC,eAAeH,GACrCC,EAAKG,YAAY1B,GAEjBU,EAAiB1B,QAAQ2C,IACnBA,EAAgBT,OAASI,GAAoC,QAAzBK,EAAgBT,MACtDK,EAAK7B,UAAUC,IAAIgC,EAAgBZ,gBAIvCN,EAAiBiB,YAAYH,KA2CvBK,CAAoBrB,EAASsB,MAC7B3C,SAASC,eAAe,iBAAiBO,UAAUG,OAAO,UAC1DX,SACGC,eAAe,iBACfO,UAAUC,IAAI,WAAY,YAC7BJ,EAASE,MAAQ,KAElBqC,MAAM,SAASC,GACd,MAAM,IAAIC,MAAMD"}